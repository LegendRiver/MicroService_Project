<?php
namespace CommonMoudle\Service;
use CommonMoudle\Constant\LogConstant;
use CommonMoudle\Constant\ServiceConstant;
use CommonMoudle\Logger\ServerLogger;

/**
 * Created by IntelliJ IDEA.
 * User: Feng
 * Date: 2017/12/29
 * Time: 下午3:07
 */
class RESTCore
{
    public static function setHeader()
    {
        header("Access-Control-Allow-Origin: *");
        header("Content-Type: application/json;charset=utf-8");
    }

    public static function parseRequestInfo()
    {
        $requestMethod = $_SERVER['REQUEST_METHOD'];
        $requestParam = $_REQUEST;
        if($requestMethod == 'POST')
        {
            $inputData = file_get_contents('php://input');
            $postParam = json_decode($inputData, true);
        }

        if(!empty($postParam))
        {
            $requestParam = array_merge($requestParam, $postParam);
        }

        if(!array_key_exists(ServiceConstant::URL_PARAM_ALIAS, $requestParam))
        {
            ServerLogger::instance()->writeLog(LogConstant::LOGGER_LEVEL_ERROR, '#Service#There is alias param in request');
            ServerLogger::instance()->writeLog(LogConstant::LOGGER_LEVEL_ERROR, '#Service#Param: ' . print_r($requestParam, true));
            return array();
        }

        $serviceAlias = $requestParam[ServiceConstant::URL_PARAM_ALIAS];
        if(ServiceParamMapManager::instance()->isExistAlias($serviceAlias))
        {
            $requestParam[ServiceConstant::PARSED_PARAM_SERVICE_NAME] = ServiceParamMapManager::instance()->getServiceName($serviceAlias);
            $requestParam[ServiceConstant::PARSED_PARAM_CLASS_NAME] = ServiceParamMapManager::instance()->getClassName($serviceAlias);
            $requestParam[ServiceConstant::PARSED_PARAM_FUNCTION_NAME] = ServiceParamMapManager::instance()->getFunctionName($serviceAlias);
        }
        else
        {
            ServerLogger::instance()->writeLog(LogConstant::LOGGER_LEVEL_ERROR, '#Service#Failed to find request map in conf by ' . $serviceAlias);
            ServerLogger::instance()->writeLog(LogConstant::LOGGER_LEVEL_ERROR, '#Service#Param: ' . print_r($requestParam, true));
            return array();
        }

        return $requestParam;
    }

    public static function callService()
    {
        $result = new ServiceResult();
        try
        {
            $requestParameters = self::parseRequestInfo();
            if(empty($requestParameters))
            {
                $result->setErrorCode(ServiceConstant::CODE_PARSE_PARAM_FAILED);
                return json_encode($result->getValue());
            }

            $serviceName = $requestParameters[ServiceConstant::PARSED_PARAM_SERVICE_NAME];
            $className = $requestParameters[ServiceConstant::PARSED_PARAM_CLASS_NAME];
            $functionName = $requestParameters[ServiceConstant::PARSED_PARAM_FUNCTION_NAME];

            $returnResult = ServiceManager::instance()->callService($serviceName, $className, $functionName, $requestParameters);
            if(empty($returnResult))
            {
                $result->setErrorCode(ServiceConstant::CODE_CALL_SERVICE_EMPTY);
                return json_encode($result->getValue());
            }
            else
            {
                return json_encode($returnResult->getValue());
            }
        } catch (\Exception $e)
        {
            ServerLogger::instance()->writeExceptionLog(LogConstant::LOGGER_LEVEL_ERROR, $e);
            $result->setErrorCode(ServiceConstant::CODE_CALL_SERVICE_EXCEPTION);
            return json_encode($result->getValue());
        }
    }

}